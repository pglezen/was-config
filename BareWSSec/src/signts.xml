<?xml version="1.0" encoding="UTF-8"?>

  <para>
  The signatures described here are considered protection tokens 
  for the purpose of configuration within the WAS admin console. In our 
  app-to-app scenario, the signature is doubling as an authentication 
  mechanism of sorts, since only the possessor of the private key could have 
  signed the message. But don't let this secondary usage misguide you when 
  working through the policy set binding panels. The signature scenario 
  exclusively deals with protection tokens, not authentication tokens.
  </para>

<section xml:id="sec.signts.keystores">
  <info>
    <title>Key Stores</title>
  </info>

<section xml:id="sec.signts.keystores.consumer">
  <info>
    <title>Service Consumer</title>
  </info>

  <para>
  The service consumer requires a key store containing a private/public
  key pair that identifies the service consumer application. The public 
  key will be extracted so that it may be provided to the consumer for 
  the purpose establishing trust.
  </para>
  <para>
  This key store, key alias, and password will be configured in the general 
  client policy bindings as a reference to a managed key store. The scripting 
  burden of the WS-Security configuration would be eased if the key store and 
  key alias names could be consistent among environments.
  </para>
</section>

<section xml:id="sec.signts.keystores.provider">
  <info>
    <title>Service Provider</title>
  </info>

  <para>
  The service provider requires a trust store containing the signer certificates 
  that the provider is willing to accept.
  For this WS-Security configuration, this amounts to the CCConsumer public certificate.
  </para>
  <para>
  As with the service consumer case, choosing a consistent name for trust store 
  simplifies the scripting of the service provider policy set bindings.
  </para>
</section>
</section>

<section xml:id="sec.signts.policyset">
  <info>
    <title>The Policy Set</title>
  </info>
<para>
A policy set is a set of WS-Policy documents. 
As mentioned in <xref linkend="sec.concepts.whatandhow"/>, 
a policy document addresses what is to be done or enforced. 
Since both ends of a consumer-provider channel must agree on this, 
the policy document is usually shared between both parties.
</para>
<para>
In the present case, the policy document will specify the signing 
of a time stamp. Later sections address policy set bindings that 
configure role and environment specific configurations, 
mostly to do with key stores.
</para>
<section xml:id="sec.signts.policyset.create">
  <info>
    <title>Policy Set Creation</title>
  </info>
  
  <para>
  The following steps show how to create a policy set that specifies
  </para>
  <itemizedlist>
    <listitem>
      A timestamp to be added to the WS-Security header
    </listitem>
    <listitem>
      the timestamp to be signed
    </listitem>
  </itemizedlist>
  <para>
  This policy set is simple enough to create from scratch.
  </para>
  <procedure>
    <step>
    <para>
    In the WAS admin console, navigate to
    <menuchoice>
      <guimenu>Services</guimenu>
      <guimenuitem>Policy sets</guimenuitem>
      <guimenuitem>Application Policy sets</guimenuitem>.
    </menuchoice>.
    </para>
    </step>
    <step>
    <para>
    Click the <guibutton>New</guibutton> button.
    </para>
    </step>    
    <step>
    <para>
    For <guilabel>Name</guilabel>, enter <literal>Sign Timestamp</literal>.
    </para>
    </step>
    <step>
    <para>
    For <guilabel>Description</guilabel>, enter
    <literal>Add a timestamp to the SOAP security header and sign it.</literal>
    </para>
    </step>
    <step>
    <para>
    In the <guilabel>Policies</guilabel> section,
    click the <guibutton>New</guibutton> button
    and select <guimenuitem>WS-Security</guimenuitem>.
    This will cause a <guilabel>WS-Security</guilabel> link to appear in the list.
    </para>
    </step>
    <step><para>Click the <guilabel>WS-Security</guilabel> link.</para></step>
    <step>
    <para>
    Click the <guilabel>main policy</guilabel> link.
    </para>
    <para>
    This panel holds all settings for the WS-Security policy.  The
    <guilabel>Message level protection</guilabel> box should already be checked.
    In the present case, all we wish to do is add a timestamp and sign it.  We
    will remove the other items.
    </para>
<figure xml:id="fig.signts.policy.main">
  <title>Main Policy Panel</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/signtsPolicy01.png" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/signtsPolicy01.png" width="5in"/>
    </imageobject>
  </mediaobject>
</figure>
    </step>
    <step>
    <para>
    The checkbox <guilabel>Include timestamp in security header</guilabel>
    should already be checked.
    </para>
    </step>
    <step>
    <para>
    Click the <guilabel>Request message part protection</guilabel> link.
    </para>
    </step>
    <step>
    <para>
    Under <guilabel>Encrypted parts</guilabel>,
    select <guilabel>app_encparts</guilabel> and click the
    <guibutton>Delete</guibutton>.
    We remove the encrypted parts because we will not be encrypting the
    payload at the message level.
    </para>
    </step>
    <step>
    <para>
    Under <guilabel>Signed parts</guilabel>,
    select <guilabel>app_signparts</guilabel>
    and click <guibutton>Edit</guibutton>.
    </para>
<figure xml:id="fig.signts.policy.signparts">
  <title>Message parts to sign</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/signtsPolicy02.png" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/signtsPolicy02.png" width="5in"/>
    </imageobject>
  </mediaobject>
</figure>
  </step>
  <step>
  <para>
  By default there are five signed parts specified:
  three general parts and two timestamp parts at the bottom.
  Remove the top three parts compresed of the Body and two
  WS-Addressing QName parts.
  You should be left with two XPath expression parts for the timestamp:
  one for SOAP 1.1 and one for SOAP 1.2.
  </para>
  </step>
  <step>
  <para>
  Click <guibutton>OK</guibutton> for the signed parts and
  <guibutton>Done</guibutton> for the request message part protection.
  </para>
  </step>
  <step>
  <para>
  Click <guilabel>Asymmetric signature and encryption policies</guilabel>.
  Verify that <guilabel>X.509</guilabel> is chosen for the
  Message Integrity Policy
  section as shown in <xref linkend="fig.signts.policy.sigpolicies"/>.
  </para>
<figure xml:id="fig.signts.policy.sigpolicies">
  <title>Asymmetric signature and encryption policies</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/signtsPolicy03.png" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/signtsPolicy03.png" width="5in"/>
    </imageobject>
  </mediaobject>
</figure>
  <para>
  If they are not present, click the <guibutton>Action</guibutton> drop-down
  menu and select <guimenuitem>Add X.509 Type</guimenuitem>.
  Choose the version shown in <xref linkend="fig.signts.policy.x509type"/>.
  </para>
<figure xml:id="fig.signts.policy.x509type">
  <title>Add X.509 Type</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/signtsPolicy04.png" width="30%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/signtsPolicy04.png" width="2in"/>
    </imageobject>
  </mediaobject>
</figure>
  </step>
  </procedure>

<para>
This completes the specification of the request message protection.
</para>
<itemizedlist>
  <listitem>
  <para>
  The default algorithms are fine; but may be adjusted.
  If you choose this section, only adjust the
  <guilabel>Algorithm suite</guilabel>.
  Do not change the <guilabel>Canonicalization algorithm</guilabel>
  or the <guilabel>XPath version</guilabel> unless you know what
  you're doing.
  </para>
  </listitem>
  <listitem>
  <para>
  There are no request or response tokens for this configuration.
  </para>
  </listitem>
</itemizedlist>
</section>

<section xml:id="sec.signts.policyset.importexport">
  <info>
    <title>Policy Set Export and Import</title>
  </info>
  
  <para>
  A policy set is usually shared between consumer and provider instances
  as well as among different environments.
  It is usually created once and exported; 
  then imported wherever else it is needed.
  </para>
  <para>
  To export the <classname>Sign Timestamp</classname> policy, navigate to
  <menuchoice>
    <guimenu>Services</guimenu>
    <guimenuitem>Policy sets</guimenuitem>
    <guimenuitem>Application policy sets</guimenuitem>
  </menuchoice>.
  Check the box next to <guilabel>Sign Timestamp</guilabel> and click the
  <guibutton>Export</guibutton> button at the top.  This will reveal a
  <guilabel>Sign Timestamp.zip</guilabel> link.  Click this link to
  download the policy set export.
  </para>
  <tip>
  <para>
  Because "Sign Timestamp" contains a space in the name for readability,
  the admin console will supply a default file name of
  <filename>Sign Timestamp.zip</filename>.
  Scripting will be simplified if this space is removed from the file name.
  This space will still be preserved for the policy name after import into
  other WAS cells.
  </para>
  </tip>
  <para>
  Here are the steps to import a policy set.
  <procedure>
  <step>
  <para>
  In the admin console, navigate to 
  <menuchoice>
    <guimenu>Services</guimenu>
    <guimenuitem>Policy sets</guimenuitem>
    <guimenuitem>Application policy sets</guimenuitem>
  </menuchoice>.
  </para>
  </step>
  <step>
  <para>
  Click the <guibutton>Import</guibutton> button and select
  <guilabel>From Selected location</guilabel>.
  </para>
  </step>
  <step>
  <para>
  Click the <guibutton>Browse</guibutton> button and select the
  policy set archive.
  </para>
  </step>
  <step>
  <para>
  Click <guibutton>OK</guibutton>.
  </para>
  </step>
  </procedure>
  </para>
  <para>
  The imported policy set should now appear in the list of
  application policy sets.
  </para>
  
</section>
</section>

<section xml:id="sec.signts.clientbindings">
  <info>
    <title>Client Policy Set Bindings</title>
  </info>
<para>
The client policy set bindings for the CCConsumerApp application
specifies how the consumer application will sign the SOAP payload
elements required by the policy set.  This amounts to specifying
</para>
<itemizedlist>
<listitem>
a key store along with the alias of the key used to sign the request,
</listitem>
<listitem>
how the corresponding certificate is to be identified.
</listitem>
</itemizedlist>
<para>
These concepts are illustrated below in 
<xref linkend="fig.signts.clientbindings.concepts"/>
as objects in a WAS configuration.
</para>
<figure xml:id="fig.signts.clientbindings.concepts">
  <title>Client binding concepts</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/clientBindingsConcepts.jpg" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/clientBindingsConcepts.jpg" width="5in"/>
    </imageobject>
  </mediaobject>
</figure>
<para>
The <firstterm>protection token</firstterm> object references a key store and
contains properties for specifying the alias of the relevant key in the key
store along with a key store password.
It represents a private key in the configuration.
</para>
<para>
The <firstterm>key info</firstterm> object determines how information about
the key will be added to the payload.  Examples include referring to the
certificate's serial number, the certificate's SHA1 thumbprint, or just
including the entire certificate as base64-encoded text.
In addition to specifying how the key will be referenced in the payload, 
it also includes a reference to the key itself through through a reference 
to the associated protection token object.
</para>
<para>
The <firstterm>request message protection</firstterm> object binds the 
protection token and key info into a single configuration.
Only when key info objects are referenced by a request message protection
object are they "activated" by the binding.
</para>
<para>
The objects in <xref linkend="fig.signts.clientbindings.concepts"/> are
configured in the WAS admin console by navigating to
  <menuchoice>
    <guimenu>Services</guimenu>
    <guimenuitem>Policy sets</guimenuitem>
    <guimenuitem>General client policy set bindings</guimenuitem>
  </menuchoice>.
  After selecting from the particular binding, click the
  <guimenu>WS-Security</guimenu> link.
  unfortunately not all objects are available from the same panel.
  <xref linkend="fig.signts.clientbindings.overlay"/> gathers together
  the three screens needed for this configuration with the conceptual
  objects from <xref linkend="fig.signts.clientbindings.concepts"/>
  superimosed on them for reference.
</para>  
<figure xml:id="fig.signts.clientbindings.overlay">
  <title>Client binding concepts overlayed on screen shot</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/clientBindingsOverlay.jpg" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/clientBindingsOverlay.jpg" width="5in"/>
    </imageobject>
  </mediaobject>
</figure>
<para>
  The WS-Security panel is shown at the top of
  <xref linkend="fig.signts.clientbindings.overlay"/>.
  The <guilabel>Authentication and protection</guilabel> link navigates to the
  panel on the left.
  The <guilabel>Keys and certificates</guilabel> link navigates to the panel
  on the right.
  The direction of the arrows in 
  <xref linkend="fig.signts.clientbindings.overlay"/>
  convey the direction of references.
  So the objects must be configured in the reverse order of the arrows so that
  the references may be resolved.
</para>
<procedure>
  <step>Configure a managed key store as described in 
       <xref linkend="sec.signts.keystores.consumer"/>.
  </step>
  <step>Create a protection token object referencing the key store.</step>
  <step>Create a key info object referencing the protection token.</step>
  <step>Create a request message protection object referencing the key
    info object.
  </step>
  <step>Add custom properties.</step>
</procedure>
<para>
  The panel for the last item is not shown in 
  <xref linkend="fig.signts.clientbindings.overlay"/>.
  But the <guilabel>Custom properties</guilabel> link to its panel is
  shown near the top.
</para>

<section xml:id="sec.signts.clientbindings.creation">
  <info>
    <title>Creation</title>
  </info>
<para>
These instruction show how to create a client policy set binding from scratch
the supports the signing of a timestamp.
It presupposes the configuration of a managed key store named CCConsumerkeyStore
that holds the signer key and certificate.
The alias for the signer certificate is ccconsumer.
</para>
<procedure>
  <step><para>
    In the Admin Console navigate to
    <menuchoice>
      <guimenu>Services</guimenu>
      <guimenuitem>Policy sets</guimenuitem>
      <guimenuitem>General client policy set bindings</guimenuitem>
    </menuchoice>.
  </para></step>
  <step><para>Click the <guibutton>New</guibutton> button.</para></step>
  <step><para>
    For <guilabel>Bindings configuration name</guilabel>, enter
    <literal>CCConsumerBindings</literal>.
  </para></step>
  <step><para>
    For <guilabel>Description</guilabel>, enter
    <literal>Specify key and key info to generate a signature for a timestamp</literal>.
  </para></step>
  <step><para>
    In the empty list of policies, click the <guibutton>Add</guibutton> button and select
    <guilabel>WS-Security</guilabel> from the dropdown list.
    </para>
    <para>
    This reveals the four sections for the message security policy bindings.  This will
    be the starting point for much of the binding configuration and will henceforth be
    referred to as the <firstterm>bindings list of four</firstterm>.
  </para></step>
  <step><para>
    Select the <guilabel>Authentication and protection</guilabel> link from the
    bindings list of four.
  </para></step>
  <step><para>
    Under <guilabel>Protection tokens</guilabel> click the <guibutton>New token</guibutton>
    button and select <guilabel>Token generator</guilabel>.  The client is a token generator
    (instead of consumer) because the client provides the signature of the timestamp.
  </para></step>
  <step><para>
    For <guilabel>Name</guilabel>, enter <literal>gen_signx509token</literal>.
    </para><para>
    This name can be arbitrary.  For this scenario, we stick to the convention used by the
    sample bindings included with WAS.  The "<literal>gen</literal>" portion of the name
    refers to its role as a token generator ("<literal>con</literal>" for consumer is an
    alternative).  The "<literal>sign</literal>" portion designates the role of a signatue
    signer ("<literal>enc</literal>" for encryption is the alternative).
  </para></step>
  <step><para>
    For <guilabel>Token type</guilabel>, select <guilabel>X509V3 v1.0</guilabel>.
  </para></step>
  <step><para>
    Click the <guibutton>OK</guibutton> button.
    This adds the entry to the list of protection tokens.
    But it still requies additional configuration.
    So click the <guilabel>gen_signx509token</guilabel> link under protection tokens.
  </para></step>
  <step><para>
    Near the bottom under <guilabel>Additional Bindings</guilabel>,
    click the <guilabel>Callback handler</guilabel> link.
  </para></step>
  <step><para>
    Under the <guilabel>Keystore</guilabel> section,
    choose the <guilabel>CCConsumerKeyStore</guilabel> managed key store created earlier.
    Since it should only have a single key pair, the <guilabel>Name</guilabel> and
    <guilabel>Alias</guilabel> are populated automatically.
    You must still provide the password.
  </para></step>
  <step><para>
    Click <guibutton>OK</guibutton> twice and <guilabel>save</guilabel> the configuration.
    </para><para>
    At this point, your binding configuration ha sspecified the key to use for the signature
    (the policy set determined what to sign).
    When the service provider receives the signature, it needs a way to determine what
    certificate to use for verification.
    This information is called the <firstterm>key info</firstterm> and there are several
    standards-based ways to specify it.
    We specify the embedded token option in the next steps.
  </para></step>
  <step><para>
    Navigate back to the <guilabel>General client policy set bindings</guilabel> panel of
    Step 1.
    You should see the new <guilabel>CCConsumerBindings</guilabel> entry.
  </para></step>
  <step><para>
    Click <guilabel>Keys and certificates</guilabel>.
  </para></step>
  <step><para>
    Under the <guilabel>Key information</guilabel> section, click <guilabel>New Outbound</guilabel>.
    We choose outbound because the signature will be outbound from the consumer.
  </para></step>
  <step><para>
    For <guilabel>Name</guilabel>, enter <literal>gen_signkeyinfo</literal>.
  </para></step>
  <step><para>
    For <guilabel>Type</guilabel>, select <guilabel>Embedded token</guilabel> from the dropdown list.
  </para></step>
  <step><para>
    For <guilabel>Token generator or consumer name</guilabel>, 
    choose the <guilabel>gen_signx509token</guilabel> key entry created in the previous section.
    </para><para>
    Since we are developing this binding from scratch, it should be the only entry available.
    If instead we had copied a sample binding to modify, there would be many entries available
    and we must take care to choose the right one.
  </para></step>
  <step><para>
    Click <guibutton>OK</guibutton> and <guilabel>save</guilabel>.
    </para><para>
    At this point you have specified a key for signing the timestamp and specified how the key
    identity is to be conveyed.
  </para></step>
  <step><para>
    Navigate back to the binding list of four (click <guilabel>WS-Security</guilabel> in the
    bread-crumb tail at the top) and select <guilabel>Authentication and protection</guilabel>.
    </para><para>
    You'll see the key definition we created earlier under <guilabel>Protection tokens</guilabel>.
    It references a particular key in a key store.  This protection token was itself referenced
    in the previous section by a key info object (Step 19).  
    These definitions by themselves do activate them.
    To be active, they must be referenced by either a request or response message protection object.
  </para></step>
  <step><para>
    Under <guilabel>Request message signature and encryption protection</guilabel>,
    click the <guibutton>New Signature</guibutton> button.
  </para></step>
  <step><para>
    For <guilabel>Name</guilabel>, enter <literal>asymmetric-signingInfoRequest</literal>.
  </para></step>
  <step><para>
    For <guilabel>Signing key information</guilabel>, choose <guilabel>gen_signkeyinfo</guilabel>
    from the dropdown list.
    This was the key info we created earlier and should be the only choice available.
  </para></step>
  <step><para>
    Click the link labeled <guilabel>Signed part reference default</guilabel>.
  </para></step>
  <step><para>
    In the <guilabel>URL</guilabel> field, select
    <guilabel>http://www.w3.org/2001/10/xml-exc-c14n#</guilabel>.
  </para></step>
  <step><para>
    Click <guibutton>OK</guibutton> and <guilabel>save</guilabel>.
  </para></step>
  <step><para>
    Navigate back to the bindings list of four and select <guilabel>Custom properties</guilabel>.
    We use two custom properties to specify that not all intermediaries are required to understand
    the signatures and that the client does not require a signed timestamp on the response.
  </para></step>
  <step><para>
    Under <guilabel>Inbound Custom Properties</guilabel>, 
    set the following property to <literal>0</literal>:
    </para><para>
    <literal>com.ibm.wsspi.wssecurity.consumer.timestampRequired</literal>
  </para></step>
  <step><para>
    Under the <guilabel>Outbound Custom Properties</guilabel>,
    set the following property to <literal>0</literal>:
    </para><para>
    <literal>com.ibm.wsspi.wssecurity.config.request.setMustUnderstand</literal>
  </para>
  <figure xml:id="fig.signts.clientbindings.customprops">
  <title>Client binding concepts overlayed on screen shot</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/clientBindingsCustomProperties.png" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/clientBindingsCustomProperties.png" width="5in"/>
    </imageobject>
  </mediaobject>
  </figure>
  </step>
  <step><para>
    Click <guibutton>OK</guibutton> and <guilabel>save</guilabel>.
  </para></step>
</procedure>
</section>

<section xml:id="sec.signts.clientbindings.export">
  <info>
    <title>Export and Import</title>
  </info>
<para>
  Exporting a client bindings is useful for backup and scripting.
  It is not typically shared with other client systems since policy set bindings are
  particular to their environment.
  In the present case, a managd key store is the only external reference.
  The external reference requires the following three items.
</para>
  <itemizedlist>
    <listitem>the name of the managed key store</listitem>
    <listitem>the password for the managed key store</listitem>
    <listitem>the alias of the signer key</listitem>
  </itemizedlist>
<para>
  Importing a client binding configuration will require that these match with an existing
  key store of that these items be adusted to an existing key store.
</para>
<para>
  To export a client binding configuration, simply check the box next to its entry and
  click the <guibutton>Export</guibutton> button.
  A link will be provided for starting the download.
</para>
</section>

</section>

<section xml:id="sec.signts.providerbindings">
  <info>
    <title>Provider Policy Set Bindings</title>
  </info>
  
<para>
  The provider policy set bindings for the CCProviderApp application specify how the
  provider application will verify the signed SOAP payload elements required by the
  policy set.
  This amounts to specifying a trust store containing the trusted signer certificates.
  <xref linkend="fig.signts.providerbindings.concepts"/>
  illustrates the WAS configuration objects needed to specify the trust store.
  It's a lot of overhead to simply specify a trust store.  It's the price of the
  abstraction layer that accounts for all the different kinds of supported
  WS-Security scenarios.
</para>

  <figure xml:id="fig.signts.providerbindings.concepts">
  <title>Provider Bindings Concepts</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/providerBindingsConcepts.jpg" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/providerBindingsCconcepts.jpg" width="5in"/>
    </imageobject>
  </mediaobject>
  </figure>

<para>
  As with the client bindings case in <xref linkend="sec.signts.clientbindings"/>,
  the order of configuration is determined by the references.
  The steps follow the arrows in reverse order.
</para>

<procedure>
  <step>
    Create a trust store a described in <xref linkend="sec.signts.keystores"/>.
  </step>
  <step>
    Create the trust store anchor object that references the managed trust store.
  </step>
  <step>
    Create the protection token object that references the trust anchor.
  </step>
  <step>
    Create the key info object that references the protection token.
  </step>
  <step>
    Create the request message protection object that references the key info.
  </step>
</procedure>

<para>
  The <firstterm>request message protection</firstterm> object determines which
  objects are active when the provider binding is assigned to a service.
  There are request and response types as well as signature and encryption types.
  For the present case, a request signature type is used.
</para>
<para>
  The <firstterm>key info</firstterm> object is used to determine how to specify
  the certificate for generated requests.
  Since this is a provider configuration that will consume the token, no such 
  specification is needed.  Only a token generator has to specfy this.  The
  only configuration in the key info for the provider is the protection token
  reference.
</para>
<para>
  The <firstterm>protection token</firstterm> references key stores and trust
  stores.  In this configuration it references a trust anchor object.
  It can also reference standalone certificates in the absense of a trust store.
</para>
<para>
  A <firstterm>trust anchor</firstterm> object is a reference to a managed
  trust store.
</para>
<para>
  These objects are configured in the WAS admin console by navigating to  
  <menuchoice>
    <guimenu>Services</guimenu>
    <guimenuitem>Policy sets</guimenuitem>
    <guimenuitem>General provider policy set bindings</guimenuitem>
  </menuchoice>.
  After selecting the particular binding, click the
  <guilabel>WS-Security</guilabel> link. 
  Unfortunately not all objects are available from the same panel.
  <xref linkend="fig.signts.providerbindings.overlay"/>
  gathers together three screens needed for this configuration with the
  objects from
  <xref linkend="fig.signts.providerbindings.concepts"/>
  superimposed on them for reference.
</para>
  
<figure xml:id="fig.signts.providerbindings.overlay">
  <title>Provider binding concepts overlayed on screen shot</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/providerBindingsOverlay.jpg" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/providerBindingsOverlay.jpg" width="5in"/>
    </imageobject>
  </mediaobject>
</figure>

<para>
  The <guilabel>WS-Security</guilabel> panel is shown at the top of
  <xref linkend="fig.signts.providerbindings.overlay"/>.
  From there one may navigate to either
</para>
<itemizedlist>
  <listitem>Authentication and protection</listitem>
  <listitem>Keys and certificates</listitem>
</itemizedlist>
<para>
  Because the references cross between the two panels, one must maneuver
  between the panels to establish the references in the proper order.
</para>

<section xml:id="sec.signts.providerbindings.creation">
  <info>
    <title>Creation</title>
  </info>

<para>
  These instructions show how to create a provider policy set binding from
  scratch that supports the signing of the timestamp.
  It presupposes the configuration of a managed trust store named
  CCProviderStore that holds the trusted signer certificates.
</para>
<procedure>
<step><para>
  In the WAS admin console, navigate to 
  <menuchoice>
    <guimenu>Services</guimenu>
    <guimenuitem>Policy sets</guimenuitem>
    <guimenuitem>General provider policy set bindings</guimenuitem>
  </menuchoice>.
</para></step>
<step><para>
  Click the <guibutton>New</guibutton> button.
</para></step>
<step><para>
  For <guilabel>Binding configuration name</guilabel>, enter
  <literal>CCProviderBindings</literal>.
</para></step>
<step><para>
  For <guilabel>Description</guilabel>, enter
  <literal>Specify trust info to verify a signature for a timestamp.</literal>
</para></step>
<step><para>
  In the empty list of policies, click the <guibutton>Add</guibutton> button
  and select <guilabel>WS-Security</guilabel> from the dropdown list.
  </para>
  
<figure xml:id="fig.signts.providerbindings.top">
  <title>Provider binding concepts overlayed on screen shot</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/ProviderBindingsTop.png" width="40%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/ProviderBindingsTop.png" width="3in"/>
    </imageobject>
  </mediaobject>
</figure>

  <para>
  This reveals the five sections<footnote>
  <para>
    The client bindings had four items here;
    the additional provider link is <guilabel>Caller</guilabel>.
  </para>
  </footnote>
  for the message security policy bindings.
  This will be the starting point for much of the binding configuration and
  will henceforth be referred to as the
  <firstterm>bindings list of five</firstterm>.
</para></step>
<step><para>
  Select <guilabel>Keys and certificates</guilabel> link from the bindings
  list of five.
</para></step>
<step><para>
  Under <guilabel>Trust anchor</guilabel>,
  click the <guibutton>New</guibutton> button.
</para></step>
<step><para>
  For <guilabel>Name</guilabel>, enter
  <literal>CCProviderTrustStore</literal>.
</para></step>
<step><para>
  Select the radio button labeled <guibutton>Centrally managed keystore</guibutton>
  and select the <guilabel>CCProviderTrustStore</guilabel> trust store you
  created earlier from the list.
  
<figure xml:id="fig.signts.providerbindings.truststore">
  <title>Provider binding truststore</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/ProviderBindingsTrustStore.png" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/ProviderBindingsTrustStore.png" width="5in"/>
    </imageobject>
  </mediaobject>
</figure>

</para></step>
<step><para>
  Click <guibutton>OK</guibutton> and <guilabel>save</guilabel> the configuration.
</para></step>
<step><para>
  Click <guilabel>WS-Security</guilabel> from the bread-crumb links at the top and
  click the <guilabel>Authentication and protection</guilabel> link from the
  bindings list of five.
</para></step>
<step><para>
  Under <guilabel>Protection tokens</guilabel> click the <guibutton>New token</guibutton>
  button and select <guilabel>Token consumer</guilabel>.
  This provider is a token consumer (not generator) because the provider verifies the
  signature of the timestamp.
</para></step>
<step><para>
  For <guilabel>Name</guilabel>, enter <literal>con_signx509token</literal>.
  </para>
  <para>
  This name is arbitrary.  For this scenario, we stick to the convention used by the
  sample bindings shipped with WAS.
  The "con" portion of the name refers to the role as a token consumer
  ("<literal>gen</literal>" for generator is the alternative).
  The "<literal>sign</literal>" portion designates the role of a signature signer
  ("<literal>enc</literal>" for encryption is the alternative).
</para></step>
<step><para>
  For <guilabel>Token type</guilabel>,
  select <guilabel>X509V3 Token v1.0</guilabel>.
</para></step>
<step><para>
  Click the <guibutton>OK</guibutton> button.
  This adds the entry to the list of protected tokens.
  But it still requires additional configuration.
  So click the <guilabel>con_signx509token</guilabel> link under the protected tokens.
</para></step>
<step><para>
  Near the bottom under <guilabel>Additional Bindings</guilabel>,
  click the <guilabel>Callback handler</guilabel> link.
</para></step>
<step><para>
  Under the <guilabel>Certificates</guilabel> section,
  select the second radio button and choose Trusted anchor store
  <guilabel>CCProviderTrustStore</guilabel> configured earlier.
</para></step>
<step><para>
  Click <guibutton>OK</guibutton> twice and <guilabel>save</guilabel>
  the configuration.
  </para><para>
  At the point your binding configuration has specified the key store to use 
  for verifying the signature (the policy set determined what to sign).
</para></step>
<step><para>
  Click the <guilabel>WS-Security</guilabel> from the bread-crumb links at the
  top and click the <guilabel>Keys and certificates</guilabel> link.
</para></step>
<step><para>
  Under the <guilabel>Key information</guilabel> section, click
  <guilabel>New Inbound</guilabel>.  We choose inbound because the 
  signature we be inbound from the provider perspective.
</para></step>
<step><para>
  For <guilabel>Name</guilabel>, enter
  <literal>con_signkeyinfo</literal>.
  </para><para>
  Note there is no <guilabel>Type</guilabel> for the key info object as in the
  client bindings.  The provider has to make due with whatever the client sends.
</para></step>
<step><para>
  For <guilabel>Token generator or consumer name</guilabel>, choose the
  <guilabel>con_signx509token</guilabel> key entry created in the previous
  section.
  </para><para>
  Since we are developing the bindings from scratch, it should be the only option
  available.  If instead we had copied a sample binding to modify, there would
  be many entries available and we must take care to choose the right one.
</para></step>
<step><para>
  Click <guibutton>OK</guibutton> and <guilabel>save</guilabel>.
</para></step>
<step><para>
  Navigate back to the binding list of four 
  (click <guilabel>WS-Security</guilabel> in the bread-crumb trail at the top)
  and select <guilabel>Authentication and protection</guilabel>.
</para></step>
<step><para>
  Under <guilabel>Request message signature and encryption protection</guilabel>,
  click the <guibutton>New Signature</guibutton> button.
</para></step>
<step><para>
  For <guilabel>Name</guilabel>, enter
  <literal>asymmetreic-signingInfoRequest</literal>.
</para></step>
<step><para>
  For <guilabel>Signing key information</guilabel>,
  choose <guilabel>con_signkeyinfo</guilabel> from the dropdown list
  and click <guibutton>Add</guibutton>.
  This was the key info we created earlier and should be the only choice available.
</para></step>
<step><para>
  Click the <guibutton>OK</guibutton> button at the bottom.
</para></step>
<step><para>
  Click back into the <guilabel>asymmetric-signingInfoRequest</guilabel>
  that was just created.
</para></step>
<step><para>
  Click the link at the bottom labeled
  <guilabel>Signed part reference default</guilabel>.
</para></step>
<step><para>
  Click the <guibutton>New</guibutton>.
</para></step>
<step><para>
  In the <guilabel>URL</guilabel> field,
  select <guilabel>http://www.w3.org/2001/10/xml-exc-c14n#</guilabel>.
</para></step>
<step><para>
  Click <guibutton>OK</guibutton> and <guilabel>save</guilabel>.
</para></step>  
</procedure>
<para>
  There are no custom properties required for the provider.
  Only the client bindings require custom properties.
</para>
</section>

<section xml:id="sec.signts.providerbindings.exportimport">
  <info>
    <title>Export and Import</title>
  </info>

<para>
  Exporting a provider binding is useful for backup and scripting.
  It is not typically shared with other systems since policy set
  bindings are particular to their environment.
  In the present case, a managed trust store is the only external
  reference.
  The external reference requires the following two items.
</para>
  <itemizedlist>
    <listitem>the name of the managed trust store</listitem>
    <listitem>the password for the managed trust store</listitem>
  </itemizedlist>
<para>
  Importing a proivder binding configuration will require that these
  match with an existing trust store or that these items be adjusted
  to the existing trust store.  
</para>
<para>
  To export a provider binding configuration, simply check the box
  next to its entry and click the <guibutton>Export</guibutton> button.
  A link will be provided for starting the download.
</para>
</section>

</section>