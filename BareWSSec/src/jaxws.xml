<?xml version="1.0" encoding="UTF-8"?>

<info>
  <title>Bare JAX-WS Web Services</title>
</info>

<section xml:id="sec.jaxws.clients">
  <info>
    <title>JAX-WS Clients</title>
  </info>
  
<para>
<emphasis role="bold">J</emphasis>ava 
<emphasis role="bold">A</emphasis>PI for 
<emphasis role="bold">X</emphasis>ML - 
<emphasis role="bold">W</emphasis>eb 
<emphasis role="bold">S</emphasis>ervices 
(JAX-WS) is a specification <xref linkend="ref.JAX-WS-1.2"/> that addresses
Java web services development.  For web service clients, this amounts to
generating Java client service stubs and XML bindings for use in invoking
the web service.  <xref linkend="fig.jaxws.client.overview"/> illustrates how
these components fit together.  The green and yellow components
are generated from the WSDL.  The green is the service stub.  Its objects
make the remote call to the service provider.  The yellow represents
the XML-type-to-Java-type bindings (or simply XML bindings).  The XML
bindings are actually addressed by a separate specification called
<emphasis role="bold">J</emphasis>ava
<emphasis role="bold">A</emphasis>PI for
<emphasis role="bold">X</emphasis>ML
<emphasis role="bold">B</emphasis>indings
(JAXB) that is referenced by JAX-WS.  This is part of what makes JAX-WS
so much more powerful than its predecessor,
<emphasis role="bold">J</emphasis>ava 
<emphasis role="bold">A</emphasis>PI for 
<emphasis role="bold">X</emphasis>ML - 
<emphasis role="bold">R</emphasis>emote 
<emphasis role="bold">P</emphasis>rocedure
<emphasis role="bold">C</emphasis>all
(JAX-RPC).

</para>
<figure xml:id="fig.jaxws.client.overview">
  <title>JAX-WS Overview</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/jaxwsOverview.jpg" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/jaxwsOverview.jpg" width="5in"/>
    </imageobject>
  </mediaobject>
</figure>
<para>
Another recent improvement is the inclusion of the JAX-WS runtime in the
Java 6 SE (standard edition).  One no longer needs to reference special
"thin client" libraries to make web service clients run.  The generated
bindings run directly against a Java 6 or later runtime.  And not only
are the runtime classes available in the JRE, the 
<firstterm>wsimport</firstterm> utility, responsible for generating
the bindings from the WSDL, is
part of the JDK on any platform.  No special IDEs or tools are needed.
</para>
<para>
The XML bindings are Java classes that map to the XML schema types defined
in the WSDL.  (One says that a Java type is bound to the XML schema type.)
These types play the role of parameters for the service invocation.  The
invocation functions themselves are methods on the service stub objects.
The bindings objects are passed as parameters to the service objects.
</para>
<para>
The generated service and binding objects tie into the JAX-WS runtime.
This may be part of the JDK as in the diagram above.  Or it may be implemented
by a vendor such as Apache CXF or IBM WebSphere Application Server.  In any
case, it is responsible for 
</para>
<itemizedlist>
  <listitem>marshaling the data structures into a serialized XML stream, and</listitem>
  <listitem>implementing the network protocol to transport the XML stream
     to the server.</listitem>
</itemizedlist>
<para>
Finally, the client code is the consumer of the service.  It issues the request
to the service stub and does whatever it requires with the result.
</para>

<para>
Web service clients may be <firstterm>managed</firstterm> or 
<firstterm>unmanaged</firstterm>.  Managed clients are typically associated with
an application server.  The client is managed in the sense that aspects of its
configuration are controllable through the administrative capabilities of the
application server.  References to the service stub objects are usually 
retrieved from JNDI.

Unmanaged clients, also known as <firstterm>thin clients</firstterm>, do not rely
on any underlying application server structure for configuration.  Their service
client proxy objects are directly instantiated. Their configuration is usually
done by setting properties on the service stub instances.  There is nothing wrong
with running a thin client inside an application server.  It simply won't benefit
from enterprise manageability features.
</para>

<section xml:id="sec.jaxws.clients.thin">
<info>
  <title>Thin Clients</title>
</info>

</section>
<para>
A thin client is one that does not expect the presense of any application
server infrastructure.  That's not to say a thin client can't run within
an application server container.  It simply doesn't depend on the container
for resources or initialization.
</para>
<para>
Generating a thin client is easy and requires nothing more than a valid WSDL
and JDK 6.  The command for generating the JAX-WS bindings is
<emphasis role="bold">wsimport</emphasis>.  It should be in your command
line path so long as your JDK is.  To verify its version and presence in
your path, query its version.
</para>
<screen>$ wsimport -version
JAX-WS RI 2.1.6 in JDK 6
$
</screen>
<para>
We'll use the WSDL listed in <xref linkend="sec.listings.ccQuery.wsdl"/>.
It's a standalone WSDL file with a single operation that queries
information about a credit card account.  Let's start with the following
invocation of wsimport.
<screen>thinclient$ wsimport -d bin -s src -p org.acme.cc.jaxws ccQuery.wsdl
parsing WSDL...
generating code...
compiling code...
thinclient$
</screen>
The options have the following meanings.
<itemizedlist>
<listitem><option>-d</option> directory into which the compiled class files are placed</listitem>
<listitem><option>-s</option> directory into which the source code is generated</listitem>
<listitem><option>-p</option> package into which the source code is generated</listitem>
</itemizedlist>
If you run this command without first creating the <filename class="directory">bin</filename> 
and <filename class="directory">src</filename> directories, the command will give an error.
Otherwise you get the following generated bindings classes.

<screen>thinclient/src/org/acme/cc/jaxws$ ls -l
total 64
-rw-r--r--  1 pglezen  staff  1073 Jun 16 13:42 CCPortType.java
-rw-r--r--  1 pglezen  staff  2341 Jun 16 13:42 CCService.java
-rw-r--r--  1 pglezen  staff  1363 Jun 16 13:42 ObjectFactory.java
-rw-r--r--  1 pglezen  staff  1813 Jun 16 13:42 QueryFault.java
-rw-r--r--  1 pglezen  staff  1053 Jun 16 13:42 QueryFaultMsg.java
-rw-r--r--  1 pglezen  staff  2061 Jun 16 13:42 QueryRequest.java
-rw-r--r--  1 pglezen  staff  3727 Jun 16 13:42 QueryResponse.java
-rw-r--r--  1 pglezen  staff   108 Jun 16 13:42 package-info.java
thinclient/src/org/acme/cc/jaxws$ 
</screen>

The problem with this generation of bindings concerns the
<classname>CCService</classname> class.  It needs to find a copy of the WSDL and
without any additional arguments to <command>wsimport</command>, it uses the
fully-qualified path name to the WSDL file from which the bindings were generated.

<programlisting>URL baseUrl;
baseUrl = org.acme.cc.jaxws.CCService.class.getResource(".");
url = new URL(baseUrl, "file:/Users/pglezen/thinclient/ccQuery.wsdl");
</programlisting>

Clearly we don't want code referencing an absolute path on a developer's
workstation.  We provide information to <command>wsimport</command> via
the <option>-wsdllocation</option>.  From the code snippet above, 
one can see that the base
of the URL begins with the package directory of the class itself.
The WSDL will be found if we add it to the directory holding
<filename>CCService.java</filename>.

<screen>thinclient$ wsimport -d bin -s src -p org.acme.cc.jaxws -wsdllocation ccQuery.wsdl ccQuery.wsdl
</screen>

This results in the following snippet in <filename>CCService.java</filename>.

<programlisting>URL baseUrl;
baseUrl = org.acme.cc.jaxws.CCService.class.getResource(".");
url = new URL(baseUrl, "ccQuery.wsdl");
</programlisting>
</para>
<para>
But then we have to make sure to copy the WSDL file to the source directory
where <filename>CCService.java</filename> resides.  An alternative is to count
the directory levels between <filename>CCService.java</filename> (four in this case)
and specify this to the <command>wsimport</command>.  Then we can simply
copy the WSDL to the <filename class="directory">bin</filename> directory.
<screen>thinclient$ wsimport -d bin -s src -p org.acme.cc.jaxws
            -wsdllocation ../../../../ccQuery.wsdl ccQuery.wsdl</screen>
This result in the following snippet in <filename>CCService.java</filename>.
<programlisting>try {
  URL baseUrl;
  baseUrl = org.acme.cc.jaxws.CCService.class.getResource(".");
  url = new URL(baseUrl, "../../../../ccQuery.wsdl");
} catch (MalformedURLException e) {
  logger.warning("Failed to create URL for the wsdl 
          Location: '../../../../ccQuery.wsdl', retrying as a local file");
  logger.warning(e.getMessage());
}</programlisting>
It makes for a funny-looking warning message if the WSDL is not found.
The lesser evil is probably a matter of choice.
</para>
<para>
The final step is a main method to drive everything.  An example is shown in
<xref linkend="ex.thin.main"/>.  If <filename>Main.java</filename> is in the
current directory, it may be compiled as shown below.
<screen>pglezen:~/thinclient$ ls
Main.java bin/    ccQuery.wsdl  src/
pglezen:~/thinclient$ javac -d bin -classpath bin Main.java
pglezen:~/thinclient$ </screen>
The <option>-d</option> option tells <command>javac</command> the root directory
in which to place the class files.  By putting it relative to
<filename class="directory">bin</filename> directory, it will be placed with
the bindings.  Since the <classname>Main</classname> class references the bindings,
and the bindings have already been compiled into the
<filename class="directory">bin</filename> directory, it is all that's needed
for the <option>-classpath</option> option.
<example xml:id="ex.thin.main">
<title>Main.java</title>
<programlisting>&thinmain;</programlisting>
</example>
<calloutlist>
  <callout arearefs="code.thinclient.service" id="callout.thinclient.service">
    <para>
    The <classname>CCService</classname> class corresponds to the 
    <classname>&lt;wsdl:service&gt;</classname> definition that starts on
    line 79 of <xref linkend="sec.listings.ccQuery.wsdl"/>.  This class
    extends <classname>javax.xml.ws.Service</classname> as required by
    the JAX-WS specification.
    </para>
  </callout>
  <callout arearefs="code.thinclient.port" id="callout.thinclient.port">
    <para>
    The <classname>CCPortType</classname> interface corresponds to the
    <classname>&lt;wsdl:portType&gt;</classname> definition that starts on
    line 52 of <xref linkend="sec.listings.ccQuery.wsdl"/>.  The
    implementation is retrieved using the <classname>getCCPort()</classname>
    method on the service class.  Such a method exists on the service
    class for each <classname>&lt;wsdl:port&gt;</classname> defined as in
    line 80 of <xref linkend="sec.listings.ccQuery.wsdl"/>.  Often there
    will be only one such definition.  Examples of when there might be
    more are when there are multiple port-types or multiple SOAP bindings
    (1.1 and 1.2) for a single port-type.
    </para>
    <para>
    Section 4.2.3 of the JAX-WS specification <xref linkend="ref.JAX-WS-1.2"/>
    warns us that these proxy types are not guaranteed to be thread safe.
    Some vendor implementations opt to provide a thread-safe implementation.
    But the specificaton does not require it; so appropriate care must be taken 
    when executing in multithreaded environments.
    </para>
  </callout>
  <callout arearefs="code.thinclient.bp" id="callout.thinclient.bp">
    <para>
    The cast from a <classname>CCPortType</classname> to a
    <classname>BindingProvider</classname> may seem dangerous since
    <classname>CCPortType</classname> does not extend
    <classname>BindingProvider</classname>.  But the JAX-WS specification
    requires that the implementation of <classname>CCPortType</classname>
    returned by the <classname>getCCPort()</classname> method also
    implement the <classname>BindingProvider</classname> interface
    as shown in <xref linkend="fig.jaxws.bindingprovider.1"/>.
    </para>
  </callout>
  <callout arearefs="code.thinclient.invoke" id="callout.thinclien.invoke">
    <para>
    This line is the actual remote invocation.
    </para>
  </callout>
</calloutlist>
</para>
<para>
The <classname>javax.xml.ws.BindingProvider</classname> interface is key to the
ability to dynamically set the remot endpoint.  This and other capabitlities are
described in Section 4.2.1 on the JAX-WS 2.1 specification
<xref linkend="ref.JAX-WS-1.2"/>.  
<xref linkend="fig.jaxws.bindingprovider.1"/> comes from the JAX-WS 2.1 specification.
It illustrates the relationship between the
<classname>BindingProvider</classname> and the request context.
</para>
  
<figure xml:id="fig.jaxws.bindingprovider.1">
  <title>JAX-WS Binding Provider</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/BindingProvider.jpg" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/BindingProvider.jpg" width="5in"/>
    </imageobject>
  </mediaobject>
</figure>


<section xml:id="sec.jaxws.clients.managed">
<info>
  <title>Managed Clients</title>
</info>

<para>
Managed clients are typically invoked by JEE components that 
rely on a server administrator for
the configuration of the web service client.  A JEE
infrastructure administrator determines properties such as target URLs
and timeouts.  The instantiation of the client service object is
typically injected into a field annotated with
<classname>@WebServiceRef</classname>.
</para>
<example id="ex.jaxws.client.ref.1">
  <title>JAX-WS Client Annotations</title>
  <programlisting>   @Resource(name="MockCC", description="Stub the remote CC call")
   Boolean mockCC = false;
   
   @WebServiceRef(name="jaxwsCC") CCService ccService;
   CCPortType account = null;</programlisting>
</example>
<para>
In the code snippet above, two variables are declared with the help of annotations.
The first one is a <classname>@Resource</classname> annotation used to inject a
<classname>Boolean</classname> value into <classname>mockCC</classname>.
This determines whether our application returns a mock object implementation or
actually attempts a remote invocation.  This technique is very useful in web
service client implementations since one cannot always rely on the service provider
being available.
</para>
<para>
A <classname>CCService</classname> instance is injected at initialization time.
The <classname>CCPortType</classname> instance is populated in intialization code.
For an EJB, this would likely be a method annotated with
<classname>@PostConstruct</classname>.
</para>
<!--
  Make sure this snippet stays consistent with the listing in 
  src/listings/AccountQueryEJB.java
  -->
<example id="ex.jaxws.client.PostConstruct.1">
  <title>EJB PostConstruct Method</title>
<programlisting>   @PostConstruct
   void initDelegate() {
      log.entering(CLASSNAME, "initDelegate");
      if (mockCC) {
         log.warning("Mock is set to true. Using mock imlementation of delegate.");
         account = new AccountQueryMock();
         log.fine("AccountQueryMock instance created.");
      } else {
         account = ccService.getCCService();
         log.fine("AccountQueryDelegate instance created.");
      }
      log.exiting(CLASSNAME, "initDelegate");
   }</programlisting>
</example>
<para>
The <classname>mockCC</classname> value is used to determine whether to create a
mock implementation of the delegate or a remote proxy implementation.
(The full listing for this managed sample is in
<xref linkend="sec.listings.AccountQueryEJB.java"/>.)
Make sure to log the fact that a mock object is being used instead of a true
remote object.  Moreover, the mock implementation should also log the fact
it runs for every method request.  It should be logged at the info level so
that its involvement is clear for every request
(in <filename>SystemOut.log</filename>).
Otherwise one could easily forget that mocking is enabled and precipitate
all kinds of backend fire drills.
</para>
<para>
The mock setting can be adjusted in the WAS admin console in the following way.
</para>
<procedure><title>Modify Mock Behavior</title>
<step><para>
  Login to the WAS admin console and navigate to the application panel.
  A sample application panel is shown in 
  <xref linkend="fig.jaxws.admin.1"/>.
  </para>
<figure xml:id="fig.jaxws.admin.1">
  <title>CC Consumer Application Panel</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/ccConsumerAppAdmin1.png" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/ccConsumerAppAdmin1.png" width="5in"/>
    </imageobject>
  </mediaobject>
</figure>
</step>
<step><para>
  Click the link labeled
  <guilabel>Environment entries for EJB modules</guilabel>
  as indicated in <xref linkend="fig.jaxws.admin.1"/>
</para></step>
<step><para>
  You can provide the <guilabel>MockCC</guilabel> value in the table
  as shown in <xref linkend="fig.jaxws.admin.2"/>.  Notice that the
  values of the <guilabel>Name</guilabel> and 
  <guilabel>Description</guilabel> columns correspond to the 
  <property>name</property> and <property>description</property>
  attributes of the <classname>@Resource</classname> annotation
  for the <classname>mockCC</classname> field in
  <xref linkref="ex.jaxws.client.ref.1"/>.
  </para>

<figure xml:id="fig.jaxws.admin.2">
  <title>CC Consumer EJB Mock Environment Entry</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/ccConsumerAppAdmin2.png" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/ccConsumerAppAdmin2.png" width="5in"/>
    </imageobject>
  </mediaobject>
</figure>
</step>
<step><para>
  Click <guilabel>OK</guilabel> and save the changes.
</para></step>
</procedure>

<para>
The save operation will cause the application to restart so that the
new value is immediately effective.  This does <emphasis>not</emphasis>
cause the JVM to restart.  The restart should only take a few seconds
for a properly written application.
</para>

<para>
Another common JAX-WS administrative task is to 
<emphasis>change the target endpoint</emphasis>.
The default endpoint is specified in the WSDL from which the bindings were
generated.  Since the endpoint is rarely known and WSDL design time and
can change across environments, it is often simply set to
<literal>localhost</literal>.
Developers will often override this using their own proprietary schema
via a property file somewhere on the file system.  Once the endpoint
host name is known, it can be set on the web service binding provider
just as in the unmanaged case in <xref linked="ex.thin.main"/>.
A drawback to this technique is that the property file must be consistent
across each machine in the cluster.  Moreover, a WAS admin must understand
each application-specific JAX-WS customization technique.
</para>
<para>
The target endpoint can be managed through the WAS admin console
(this is a <emphasis>managed</emphasis> client after all!).  If the
application doesn't override the endpoint host and port, the endpoint
can be set following these steps.
</para>

<procedure><title>Modify JAX-WS Endpoint Destination</title>
<step><para>
 In the WAS admin console, navigate to the application panel.
</para></step>
<step><para>
 Select the <guilabel>Manage Modules</guilabel> link.
</para></step>
<step><para>
 Select the module containing the JAX-WS client.
</para></step>
<step><para>
 Click the <guilabel>Web service client bindings</guilabel> link
 shown in <xref linkend="fig.jaxws.admin.3"/>.
 </para>
 
<figure xml:id="fig.jaxws.admin.3">
  <title>Module with Client Bindings</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/ccConsumerAppAdmin3.png" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/ccConsumerAppAdmin3.png" width="5in"/>
    </imageobject>
  </mediaobject>
</figure>
</step>

<step><para>
 From the list of bindings, choose the one corresponding to the
 <classname>@WebServiceRef</classname> annotation in
 <xref linkend="ex.jaxws.client.ref.1"/>.  The <property>name</property>
 attribute of the annotation should match the <guilabel>Web Service</guilabel>
 column in the table of <xref linkend="fig.jaxws.admin.4"/>.  From
 this row, click the <guilabel>Edit</guilabel> link in the 
 <guilabel>Port Information</guilabel> column.
 </para>

<figure xml:id="fig.jaxws.admin.4">
  <title>Client Binding List</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/ccConsumerAppAdmin4.png" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/ccConsumerAppAdmin4.png" width="5in"/>
    </imageobject>
  </mediaobject>
</figure>
</step>

<step><para>
  Enter the full endpoint address in the column labeled
  <guilabel>Overridden Endpoint URL</guilabel> as shown in
  <xref linkend="fig.jaxws.admin.5"/>.
  </para>

<figure xml:id="fig.jaxws.admin.5">
  <title>JAX-WS Endpoint Override</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/ccConsumerAppAdmin5.png" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/ccConsumerAppAdmin5.png" width="5in"/>
    </imageobject>
  </mediaobject>
</figure>
</step>
<step><para>
  Click the <guibutton>OK</guibutton> and save.
</para></step>
</procedure>
<para>
The <guilabel>Save</guilabel> action will restart the application.
The new new destination will become immediately effective.  Remember this
only works if the client code does not override the BindingProvider
settings as done in <xref linkend="ex.thin.main"/>.
</para>
</section>
</section>

<section xml:id="sec.jaxws.servers">
  <info>
    <title>JAX-WS Servers</title>
  </info>

<para>
JAX-WS XML bindings for the server are no different than they are for the client.
When using <command>wsimport</command> from the command line, there is no difference
in the appearance of the output.  The difference is 
<emphasis>what you do with the output</emphasis>.
You can start by deleting the port type and service classes
(the classes by annotations 
<xref linkend="code.thinclient.service"/> and 
<xref linkend="code.thinclient.port"/> of 
<xref linkend="ex.thin.main"/>).
These would only be used by a client and we're implementing the provider.
But this begs the question: what do we use for the implementation class?
</para>
<para>
The answer, when using <command>wsimport</command> from the command line, is that
there is nothing to help you with the implementation class.  You just create one
from scratch that matches the operations in the WSDL and use Java annotations
to piece everything together.  The implementation class doesn't even have to
implement the service interface!  This may seem a bit scary at first.  But it's
not hard once you know which annotations to use; and we'll get to that in a bit.
</para>
<!-- footnote
   This is a change in behavior from the WSDL2Java of specifying a flag for
   either client, web, or EJB bindings.
  -->
<para>
The good news for RAD (Rational Application Developer) users is that the
<guimenuitem>Generate Java Bean Skeleton</guimenuitem> wizard actually does generate
the skeleton with the annotations.
<!-- what about WST in Eclipse? -->
It is this wizard that we'll discuss in detail for the provider implementation.
</para>
<!-- But first talk about the annotations as promised. -->

<!-- 
  Add this section on manual annotations after documenting the RAD path
<section xml:id="sec.jaxws.servers.wsimport">
  <info>
    <title>Using the <command>wsimport</command> Command</title>
  </info>

<para>
Before we jump into the ways we can generate Java bindings with RAD,
let's take a quick look at how we'd go at it alone.
</para>
</section>
  -->

<section xml:id="sec.jaxws.servers.rad">
  <info>
    <title>Using the Java Bindings Wizard</title>
  </info>

<para>
The <guimenuitem>Generate Java Bean Skeleton</guimenuitem> wizard is how we 
create and update the Java bindings and service implementation skeleton.
Many of these instructions apply just as well to Eclipse JEE edition as
they do to RAD.
<!--
Running the wizard again after, say, a WSDL modification, will only overwrite
classes with your permission.  Moreover, it can be configured to merge 
changes to your implementation class so you don't loose code you've written.
  -->
</para>  

<section xml:id="sec.jaxws.servers.rad.runtime">
  <info>
    <title>JAX-WS Runtime</title>
  </info>

<para>
The JAX-WS bindings wizard requires that you specifiy which JAX-WS runtime
library implementation to target.  In our case, we'll target the WAS
version of this runtime.  But for the WAS runtime to be an available option,
we need to register the location of the WAS runtime libraries on our developer
workstation.  The WAS runtime libraries are available from a local WAS
installation on which you intend to run your local tests.
</para>
<para>
Follow these steps to register your WAS installation with RAD installation.
</para>
<procedure><title>Register WAS runtime with RAD</title>
<step>
  <para>Open the preferences window to
  <menuchoice>
    <guimenu>Window</guimenu>
    <guimenuitem>Prferences</guimenuitem>
  </menuchoice>
  and navigate to
  <menuchoice>
    <guimenu>Server</guimenu>
    <guimenuitem>Runtime Environment</guimenuitem>
  </menuchoice>.
  This should reveal the currently available server runtime environment as
  shown in <xref linkend="fig.rad.prefs.servers.1"/>.
  </para>
  
<figure xml:id="fig.rad.prefs.servers.1">
  <title>Initial Server Runtimes</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/eclipsePref01.png" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/eclipsePref01.png" width="5in"/>
    </imageobject>
  </mediaobject>
</figure>

  <para>
  If this is the first runtime you've cataloged, you will only see the
  Web Preview Server Runtime.
  </para>
  </step>
  <step>Click the <guibutton>Add</guibutton> in 
     <xref linkend="fig.rad.prefs.servers.1"/>.
  </step>
  <step>
    <para>
    Select <guilabel>WebSphere Application Server v8.5</guilabel> from
    the list of available server adapters as shown in
    <xref linkend="fig.rad.prefs.servers.2"/>.
    </para>

<figure xml:id="fig.rad.prefs.servers.2">
  <title>Choose the WAS 8.5 Adapter</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/eclipsePref02.png" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/eclipsePref02.png" width="5in"/>
    </imageobject>
  </mediaobject>
</figure>

    <para>
    If this selection is not available in <xref linkend="fig.rad.prefs.servers.2"/>,
    it is because you did not install the WAS 8.5 test server component
    during your RAD install.  You must
    <substeps>
      <step>download the WAS 8.5 test environment repository</step>
      <step>make it available to your IBM Installation Manager</step>
      <step>run the Installation Manager <guibutton>Modify</guibutton> command</step>
      <step>add the WAS 8.5 test environment in the wizard.</step>
    </substeps> 
    </para>
  </step>
  <step>
    <para>
    Provide a <guilabel>Name</guilabel> for the runtime environment.  
    You can shorten the default
    "WebSphere Application Server v8.5" to just "WAS v8.5".  But be
    sure to note <xref linkend="tip.server.runtime.name"/>.
    </para>
    
    <tip xml:id="tip.server.runtime.name">
    <title>Impact of Runtime Label on Team Development</title>
    <para>
    The value of the <guilabel>Name</guilabel> field in 
    <xref linkend="fig.rad.prefs.servers.3"/> 
    will be embedded in your project metadata where ever you declare 
    a dependency on it.  Other developers with whom you share projects
    may declare this differently.  When you share projects via source control,
    these dependencies won't resolve due to the name conflict.  It's helpful
    to make sure everyone on the team agrees to the same environment name.
    </para>
    </tip>
    
<figure xml:id="fig.rad.prefs.servers.3">
  <title>Provide WAS 8.5 location</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/eclipsePref03.png" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/eclipsePref03.png" width="5in"/>
    </imageobject>
  </mediaobject>
</figure>

   <para>
   For the <guilabel>Installation directory</guilabel> field, enter the location
   of the WAS 8.5 installation on your workstation.  The <guilabel>JRE</guilabel>
   information will be completed automatically when you enter a valid WAS 8.5
   installation directory.
   </para>
  </step>
  <step>
    <para>
    Click <guilabel>Finish</guilabel>.  The result should be that the WAS 8.5
    installation appears in the <guilabel>Server Runtime Environment</guilabel>
    panel as shown in <xref linkend="fig.rad.prefs.servers.4"/>.
    </para>
    
<figure xml:id="fig.rad.prefs.servers.4">
  <title>Server runtimes with WAS 8.5</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/eclipsePref04.png" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/eclipsePref04.png" width="5in"/>
    </imageobject>
  </mediaobject>
</figure>

    <para>
    If you select the <guilabel>WebSphere Application Server</guilabel>
    entry in the preference navigation panel (just under
    <guilabel>Runtime Environments</guilabel>), you'll see the WAS 8.5
    entry is present in the top list of
    <xref linkend="fig.rad.prefs.servers.5"/>.  Select the WAS 8.5 entry
    and the bottom list will display a list of profiles.
    </para>
    
<figure xml:id="fig.rad.prefs.servers.5">
  <title>WAS 8.5 Profiles</title>
  <mediaobject>
    <imageobject condition="web">
      <imagedata fileref="images/eclipsePref05.png" width="70%"/>
    </imageobject>
    <imageobject condition="print">
      <imagedata fileref="images/eclipsePref05.png" width="5in"/>
    </imageobject>
  </mediaobject>
</figure>

  <para>
  From this panel you may choose to create a new WAS 8.5 profile for your
  development activities.
  </para>
  
  <tip>
    <para>
    It's good to use separate profiles for applications that will run
    in separate JVMs in order to model the isolation you expect in the
    production environment.  On the other hand, applications which are
    expected to run together should share the same profile.
    </para>
  </tip>
  </step>
  <step>Click <guibutton>OK</guibutton> to save your changes.</step>
</procedure>
</section>

<section xml:id="sec.jaxws.servers.rad.prefs">
  <info>
    <title>JAX-WS Emitter Preferences</title>
  </info>

<para>
The prospect of running the emitter wizard mulitple times raises a concern
regarding consistency.  How do you remember to run the wizard with the same
options every time?  It would be nice if the emitter wizard allowed you to
save your options in a file for future invocations (like when exporting a
JAR archive in Eclipse).
<!-- footnote - I've appealed for this feature to no avail.  -->
But there is no such feature.  The closest we can come is to configure defaults
for the emitter wizard that are as close as possible to what you want so you
can lessen the likelihood of making an error.
</para>
<para>
In the RAD preferences window there are several navigation choices under
<guimenu>Web Services</guimenu>.
Not all of them apply to JAX-WS generation.
The
  <menuchoice>
    <guimenu>Web Services</guimenu>
    <guimenuitem>Resource Management</guimenuitem>
  </menuchoice>.
panel allows you to specify that 
</para>

</section>

<section xml:id="sec.jaxws.servers.rad.wizard">
  <info>
    <title>JAX-WS Emitter Wizard</title>
  </info>
  
<!-- the following should probably be a set of instructions -->  
  
<para>
To start the emitter wizard, right-click on the WSDL source file and select
  <menuchoice>
    <guimenu>Web Services</guimenu>
    <guimenuitem>Generate Java Bean Skeleton</guimenuitem>
  </menuchoice>.
The first panel is shown in <xref linkend="fig.jaxws.server.rad.wizard.panel1"/>.
The WSDL file name should already be populated if you started the emitter
wizard by right-clicking the WSDL file.
</para>
<para>
The skeleton generanted by the RAD wizard is shown in the listing below.
</para>
<programlisting>package org.acme.cc.jaxws;

@javax.jws.WebService (endpointInterface="org.acme.cc.jaxws.CCPortType", 
                       targetNamespace="urn:issw:bare:wssec:cc:query", 
                       serviceName="CCService", 
                       portName="CCService", 
                       wsdlLocation="WEB-INF/wsdl/ccQuery.wsdl")
public class CCSoapBindingImpl{

    public QueryResponse query(QueryRequest parameters) throws QueryFaultMsg {
        // TODO Auto-generated method stub
        return null;
    }
}</programlisting>

</section>

</section>


</section>
